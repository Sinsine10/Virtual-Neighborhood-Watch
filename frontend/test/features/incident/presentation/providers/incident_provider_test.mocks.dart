// Mocks generated by Mockito 5.4.6 from annotations
// in neihborhoodwatch/test/features/incident/presentation/providers/incident_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:neihborhoodwatch/features/incident/data/datasources/incident_remote_datasource.dart'
    as _i2;
import 'package:neihborhoodwatch/features/incident/data/repositories/incident_repository_impl.dart'
    as _i3;
import 'package:neihborhoodwatch/features/incident/domain/entities/incident.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIncidentRemoteDataSource_0 extends _i1.SmartFake
    implements _i2.IncidentRemoteDataSource {
  _FakeIncidentRemoteDataSource_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [IncidentRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockIncidentRepositoryImpl extends _i1.Mock
    implements _i3.IncidentRepositoryImpl {
  MockIncidentRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IncidentRemoteDataSource get remoteDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#remoteDataSource),
            returnValue: _FakeIncidentRemoteDataSource_0(
              this,
              Invocation.getter(#remoteDataSource),
            ),
          )
          as _i2.IncidentRemoteDataSource);

  @override
  _i4.Future<List<_i5.Incident>> getAllIncidents() =>
      (super.noSuchMethod(
            Invocation.method(#getAllIncidents, []),
            returnValue: _i4.Future<List<_i5.Incident>>.value(<_i5.Incident>[]),
          )
          as _i4.Future<List<_i5.Incident>>);

  @override
  _i4.Future<void> addIncident(_i5.Incident? incident) =>
      (super.noSuchMethod(
            Invocation.method(#addIncident, [incident]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateIncident(_i5.Incident? incident) =>
      (super.noSuchMethod(
            Invocation.method(#updateIncident, [incident]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteIncident(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteIncident, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
