// Mocks generated by Mockito 5.4.6 from annotations
// in neihborhoodwatch/test/features/tip/data/repositories/tip_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:neihborhoodwatch/features/tip/data/datasources/tip_remote_datasource.dart'
    as _i3;
import 'package:neihborhoodwatch/features/tip/domain/entities/tip.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTip_0 extends _i1.SmartFake implements _i2.Tip {
  _FakeTip_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TipRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTipRemoteDataSource extends _i1.Mock
    implements _i3.TipRemoteDataSource {
  MockTipRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Tip> createTip(Map<String, dynamic>? tipData) =>
      (super.noSuchMethod(
            Invocation.method(#createTip, [tipData]),
            returnValue: _i4.Future<_i2.Tip>.value(
              _FakeTip_0(this, Invocation.method(#createTip, [tipData])),
            ),
          )
          as _i4.Future<_i2.Tip>);

  @override
  _i4.Future<List<_i2.Tip>> fetchTips() =>
      (super.noSuchMethod(
            Invocation.method(#fetchTips, []),
            returnValue: _i4.Future<List<_i2.Tip>>.value(<_i2.Tip>[]),
          )
          as _i4.Future<List<_i2.Tip>>);

  @override
  _i4.Future<void> updateTip(int? id, String? description) =>
      (super.noSuchMethod(
            Invocation.method(#updateTip, [id, description]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTip(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTip, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.Tip> fetchTipById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchTipById, [id]),
            returnValue: _i4.Future<_i2.Tip>.value(
              _FakeTip_0(this, Invocation.method(#fetchTipById, [id])),
            ),
          )
          as _i4.Future<_i2.Tip>);
}
